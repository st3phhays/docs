---
import type { ContentTree } from '@scripts/types';
import { slugId } from '@scripts/helpers';

import SidebarListItem from '@components/sidebar/SidebarListItem.astro';

interface Props {
    content: ContentTree[];
}

const { content } = Astro.props;
const activeSlug = Astro.url.pathname;

const listItemPaddingClass = (depth: number) => {
    let paddingClass = '';
    switch (depth) {
        case 1:
            paddingClass = 'ps-c2';
            break;
        case 2:
            paddingClass = 'ps-5';
            break;
        case 3:
            paddingClass = 'ps-c4';
            break;
        case 4:
            paddingClass = 'ps-c5';
            break;
        case 5:
            paddingClass = 'ps-c6';
            break;
        case 6:
            paddingClass = 'ps-c7';
            break;
    }

    return paddingClass;
};

const listPaddingClass = (depth: number) => {
    let paddingClass = '';
    switch (depth) {
        case 1:
            paddingClass = 'ps-3';
            break;
        case 2:
            paddingClass = 'ps-c2';
            break;
        case 3:
            paddingClass = 'ps-5';
            break;
        case 4:
            paddingClass = 'ps-c4';
            break;
        case 5:
            paddingClass = 'ps-c5';
            break;
    }

    return paddingClass;
};

const isActiveChild = (doc: ContentTree) => {
    // Create a stack to store documents to be checked
    const stack = [doc];
    
    // Iterate through the stack until it's empty
    while (stack.length > 0) {
        // Pop the last document from the stack
        const currentDoc: ContentTree | undefined = stack.pop();

        if (!currentDoc) {
            return false;
        }
        
        // Check if the current document's slug matches the activeSlug
        if (currentDoc.slug === activeSlug || currentDoc.slug.slice(0, -1) === activeSlug) {
            return true;
        }

        // If the current document has children, push them onto the stack to explore further
        if (currentDoc.children) {
            for (const child of currentDoc.children) {
                stack.push(child);
            }
        }
    }
    
    // If the activeSlug is not found in any document, return false
    return false;
};

const isActivePage = (doc: ContentTree) => {
    return doc.slug === activeSlug || doc.slug.slice(0, -1) === activeSlug;
};
---

{content.filter(doc => doc.data.showInSidebar === true).map(doc => (
    doc.children && doc.children.length > 0 ? (
        <li class={`nav-item nav-item-blue ${isActiveChild(doc) ? 'active' : ''}`}>
            <div class={`nav-link nav-link-collapse d-flex ${isActiveChild(doc) ? 'active' : ''} ${isActivePage(doc) ? 'active-page' : ''}`}>
                <button class={`btn btn-collapse rounded-0 border-0 ${listPaddingClass(doc.data.depth)} ${isActiveChild(doc) ? '' : 'collapsed'}`} type="button" data-bs-toggle="collapse" aria-expanded={`${isActiveChild(doc) ? 'true' : 'false'}`} aria-controls={slugId(`id-${doc.slug}`)} aria-label="collapse or expand navigation" data-bs-target={slugId(`#id-${doc.slug}`)}></button>
                <a href={doc.slug}>{doc.data.title}</a>
            </div>
            <div class={`collapse ${isActiveChild(doc) ? 'show' : ''}`} id={slugId(`id-${doc.slug}`)}>
                <ul class="navbar-nav">
                    {Array.isArray(doc.children) && (
                        <Astro.self content={doc.children} />
                    )}
                </ul>
            </div>
        </li>
    ) : (
        <SidebarListItem content={doc} paddingClass={listItemPaddingClass(doc.data.depth)} />
    )
))}
